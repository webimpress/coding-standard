<?php

namespace First {
    use Used\A;
    use Used\B;
    use Used\C;
    use Used\Bar;
    use Used\Car;
    use Used\Exception1;
    use Used\Exception2;


    use const Used\Baz;

    class FirstClass
    {
        use SomeTrait {
            car as me;
            Abc::method as hello;
            Def::other insteadof foo;
        }

        const BAR = 1;

        public function first_func(?A $a, B ...$b) : C
        {
        }

        public function bar() : string
        {
            return Bar::class;
        }

        public function car() : string
        {
            return new Car(Baz);
        }

        public function exception() : void
        {
            try {
            } catch (Exception1|Exception2|\GlobalException $ex) {
            }
        }
    }
}

namespace Second {
    use Used\Extend1;
    use Used\Extend2;
    use Used\Extend3;
    use Used\Interface1;
    use Used\Interface2;
    use Used\InstanceOf1;

    use const Space\A;
    use const Space\B;

    $a = A|B|\Ns\C;

    interface I extends Extend1, Extend2 {}
    class C extends Extend3 implements Interface1, Interface2 {}

    $b = $a instanceof InstanceOf1;
}

namespace Third {
    use Something\B;
    use Something\D;

    class A implements B, \C, D
    {
    }
}

namespace Fourth {
    use Something\Foo;

    Foo\A::class;
}

namespace Fifth {
    use MyNamespace\MyClass1;
    use MyNamespace\MyClass2;
    use MyNamespace\MyType1;
    use MyNamespace\MyType2;
    use MyNamespace\MyType3;

    use function file_get_contents;
    use function file_put_contents;

    use const JSON_PRETTY_PRINT;
    use const MyNamespace\CONST_1;
    use const MyNamespace\CONST_2;

    switch (true) {
        case 1:
            file_put_contents(__FILE__, __DIR__);
            break;
        case 2:
            CONST_1 + $a;
            break;
        case 3:
            MyClass1::class;
            break;
        case 4;
            file_get_contents(__FILE__);
            break;
        case 5;
            CONST_2 + $b;
            break;
        case 6;
            MyClass2::class;
            break;
    }

    abstract class MyAbstractClass {
        abstract public function myMethod1() : MyType1;

        public function myMethod2() : MyType2 {
            static function () use ($a) : MyType3 {};
        }
    }

    $jsonFlags = JSON_PRETTY_PRINT | $jsonFlags;
}
