<?php
// @phpcs:set WebimpressCodingStandard.Formatting.ReturnType spacesBeforeColon 0
// @phpcs:set WebimpressCodingStandard.Formatting.ReturnType spacesAfterColon 1

$v = 1;

$f1 = function ($a) use ($v): int {
    return $a * $v;
};

$f2 = function ($a, $b): int {
    return $a ** $b;
};

switch ($v) {
    case 1:
        $x = $f1(-1 * $v);
        break;
    case (2) :
        $x = $f2(-1 * $v, $v);
        break;
    default:
        $x = $f1($v) + $f2(-1 * $v, $v);
        break;
}

class ReturnType
{
    public function method(): array
    {
        return [];
    }

    private function priv(
        $a,
        $b
    ): int {
        return $a * $b;
    }
}

$c = new class() {
    public function method(): float {
        return mt_rand();
    }
};

abstract class AbsCla
{
    abstract public function x(): bool;
}

interface MyInterface
{
    public function a(): void;
    public function b(): int;
    public function c(): ?int;
    public function d(): float;
    public function e(): ? float;
    public function f(): object;
    public function g(): ?object;
    public function h(): array;
    public function i(): ?array;
    public function j(): string;
    public function k(): ?string;
    public function l(): parent;
    public function m(): ?parent;
    public function n(): callable;
    public function o(): ?callable;
    public function p(): bool;
    public function q(): ?bool;
    public function r(): self;
    public function s(): ?self;
    public function t(): iterable;
    public function u(): ?iterable;

    public function v($a): \DateTime;
    public function w(): ?\DateTime;

    public function y($a, $b, $c): \My\TestClass;
    public function z(): ? \ReturnType\MyType;
}

class NonFixable
{
    public function a() // comment
    : int {}

    public function b() /* comment */ : int {}

    public function c(): // comment
    int {}
    public function d(): /* comment */ int {}

    public function e() {}
}

static fn (string $a): int => $a;

abstract class PHP82 {
    abstract public function union(): bool|string;
    abstract public function intersection(): Iterator&Countable;
    abstract public function boolFalse(): false;
    abstract public function boolTrue(): true;
    abstract public function null(): null;
    abstract public function parenthesis(): (Iterator&Countable)|object;
}
