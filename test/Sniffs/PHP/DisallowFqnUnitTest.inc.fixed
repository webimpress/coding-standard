<?php

namespace MyNamespace \ Hello;

use ArrayAccess;
use Countable;
use DateTime;
use InClosure\Param;
use InClosure\ReturnType;
use const InClosure\CONST_IN_CLOSURE;
use function InClosure\functionInClosure;
use RuntimeException;
use Throwable;
use Name\Space;
use Exception;
use Error;
use MyNamespace\Other\OtherClass;
use function MyNamespace\Other\otherFunction;
use function Bar\Baz\barBaz;
use function Name\functionInSwitch;
use function Name\otherFunctionInSwitch;
use const MyNamespace\Other\OTHER_CONST;
use const Bar\Baz\BAR_BAZ;
use const Name\NAME_CONST;
use const Name\CONST_IN_SWITCH;
use const Name\OTHER_CONST_IN_SWITCH;
use MyTrait;
use B;
use InFnClosure\Param1;
use InFnClosure\ReturnType1;
use MyNamespace\Foo1\Bar1;
use DNF\Type1;
use DNF\Type2;
use DNF\Type3;
use DNF\Type4;
use DNF\Type5;
use DNF\Type6;
use DNF\Type7;
use DNF\Type8;
use DNF\Type9;
use DNF\Type10;
use DNF\Type11;
use DNF\Type12;
use DNF\Type13;
use DNF\Type14;
use DNF\Type15;

use \ArrayObject as AO;
use Foo\BarBaz;
use stdClass;

use function Foo\Bar\fooBar;

use const Foo\Bar\FOO_BAR;

class TheClass extends ParentClass      implements ArrayAccess, Countable
{
    use MyTrait;

    private $a;

    public function __construct(DateTime $dateTime)
    {
        $this->a = new A\ClassA  ();

        // class with the same name exists in the same directory (assumed: namespace)
        new \SomeNamespace\DisallowFqnUnitTest();

        // directory with the same name exists here so it assumes it has the namespace
        new \SomeNamespace\BarBaz\TestAsset();

        (function (Param &$inClosure) use ($dateTime) : ReturnType {
            // the alias is used, so it can't be imported
            new \AO();
        })(CONST_IN_CLOSURE, functionInClosure());
    }

    public function test(AO ...$ao) : ArrayAccess
    {
        throw new RuntimeException();
    }

    public function catchException(Throwable $throwable = null, Space &$space = null)
    {
        try {
            $this->test(new AO());
        } catch (Exception | Error $ex) {
            throw $ex;
        }
    }

    public function doubleColon()
    {
        MyClass::class;
        OtherClass::CLASS_CONST;
    }

    public function functionFromNamespace()
    {
        myFunction    ();

        otherFunction();

        fooBar();
        \AnotherNamespace\fooBar();

        barBaz();

        switch (true) {
            case 1:
                functionInSwitch();
                break;

            case 2 * (3 + 2):
                otherFunctionInSwitch();
                break;
        }
    }

    public function constantFromNamespace(int $var)
    {
        MY_CONST  ;

        OTHER_CONST;

        FOO_BAR;
        \AnotherNamespace\FOO_BAR;

        BAR_BAZ;

        NAME_CONST | NAME_CONST & $var;

        switch (true) {
            case 1:
                CONST_IN_SWITCH;
                break;

            case 2 * (3 + 2):
                OTHER_CONST_IN_SWITCH;
                break;
        }
    }

    public function internalFunctionAndConstant()
    {
        $arr = array_merge([], []);

        \sort($arr);

        return \T_WHITESPACE + T_ELLIPSIS;
    }

    public function missingSpace()
    {
        return new class () extends DateTime implements Countable
        {
            use MyTrait {
                A::big insteadof B;
            }

            public function checkInstance($a) : bool
            {
                return $a instanceof Exception;
            }

            public function conditions(string $a) : ?string
            {
                switch ($a) {
                    case DateTime::class:
                        return DateTime::class;
                    case Countable::class:
                        print Countable::class;
                        echo Countable::class;
                        return null;
                    case 'require':
                        require DateTime::class.'.php';
                        require_once DateTime::class.'.php';
                        include DateTime::class.'.php';
                        include_once DateTime::class.'.php';
                    case 'new':
                        new DateTime();
                }

                if ($a and DateTime::class) {
                } elseif ($a or DateTime::class) {
                } elseif ($a xor DateTime::class) {}

                throw RuntimeException::something();
            }
        };
    }

    /**
     * @param \Bar[]\Foo[] $param
     */
    abstract public function invalidTypeFormatIsNotChanged($param);

    public function fnClosure()
    {
        return fn (Param1 &$param1) : ReturnType1 => $param1;
    }

    /**
     * @return BarBaz\MyInterface
     */
    public function method1(object $a)
    {
        return $a;
    }

    /**
     * @param stdClass $obj
     */
    public function method2($obj)
    {
        return $obj;
    }

    public function method2()
    {
        new Bar1();
        new Bar1\Bar2();
        new BarBaz\Bar3();
    }

    public function method3(): Type1|(Type2&Type3)
    {
    }

    public function method4(): (Type4|Type5)&Type6
    {
    }

    abstract public function method5(): (Type7|Type8)&Type9;

    private Type10&(Type11|Type12) $prop1;
    private (Type13&Type14)|Type15 $prop2;
}
